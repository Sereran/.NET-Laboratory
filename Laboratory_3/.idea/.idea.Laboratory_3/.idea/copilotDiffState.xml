<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Laboratory_3/Features/Books/UpdateBookHandler.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Laboratory_3/Features/Books/UpdateBookHandler.cs" />
              <option name="originalContent" value="namespace Laboratory_3.Features.Books;&#10;&#10;using Laboratory_3.Persistence;&#10;using Laboratory_3.Validators;&#10;&#10;public class UpdateBookHandler(BookManagementContext context)&#10;{&#10;    private readonly BookManagementContext _context = context;&#10;    &#10;    public async Task&lt;IResult&gt; Handle(Guid id, UpdateBookRequest request)&#10;    {&#10;        // If the client included an Id in the body, require it to match the route id&#10;        if (request.Id != Guid.Empty &amp;&amp; request.Id != id)&#10;        {&#10;            return Results.BadRequest(&quot;Id in route and body must match.&quot;);&#10;        }&#10;&#10;        // If body omitted Id, populate it from the route so validators that require Id pass&#10;        if (request.Id == Guid.Empty)&#10;        {&#10;            request = request with { Id = id };&#10;        }&#10;&#10;        var validator = new UpdateBook();&#10;        var validationResult = await validator.ValidateAsync(request);&#10;        if (!validationResult.IsValid)&#10;        {&#10;            return Results.BadRequest(validationResult.Errors);&#10;        }&#10;&#10;        var existing = await _context.Books.FindAsync(id);&#10;        if (existing is null)&#10;        {&#10;            return Results.NotFound();&#10;        }&#10;&#10;        var updated = new Book(existing.Id, request.Title, request.Author, request.Year);&#10;        _context.Books.Update(updated);&#10;        await _context.SaveChangesAsync();&#10;&#10;        return Results.NoContent();&#10;    }&#10;}" />
              <option name="updatedContent" value="namespace Laboratory_3.Features.Books;&#10;&#10;using Laboratory_3.Persistence;&#10;using Laboratory_3.Validators;&#10;&#10;public class UpdateBookHandler(BookManagementContext context)&#10;{&#10;    private readonly BookManagementContext _context = context;&#10;    &#10;    public async Task&lt;IResult&gt; Handle(Guid id, UpdateBookRequest request)&#10;    {&#10;        // If the client included an Id in the body, require it to match the route id&#10;        if (request.Id != Guid.Empty &amp;&amp; request.Id != id)&#10;        {&#10;            return Results.BadRequest(&quot;Id in route and body must match.&quot;);&#10;        }&#10;&#10;        // If body omitted Id, populate it from the route so validators that require Id pass&#10;        if (request.Id == Guid.Empty)&#10;        {&#10;            request = request with { Id = id };&#10;        }&#10;&#10;        var validator = new UpdateBook();&#10;        var validationResult = await validator.ValidateAsync(request);&#10;        if (!validationResult.IsValid)&#10;        {&#10;            return Results.BadRequest(validationResult.Errors);&#10;        }&#10;&#10;        var existing = await _context.Books.FindAsync(id);&#10;        if (existing is null)&#10;        {&#10;            return Results.NotFound();&#10;        }&#10;&#10;        var updated = new Book(existing.Id, request.Title, request.Author, request.Year);&#10;        _context.Books.Update(updated);&#10;        await _context.SaveChangesAsync();&#10;&#10;        return Results.NoContent();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Laboratory_3/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Laboratory_3/Program.cs" />
              <option name="originalContent" value="using Laboratory_3.Features.Books;&#10;using Laboratory_3.Persistence;&#10;using Laboratory_3.Validators;&#10;using FluentValidation;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi&#10;builder.Services.AddOpenApi();&#10;builder.Services.AddEndpointsApiExplorer();&#10;builder.Services.AddDbContext&lt;BookManagementContext&gt;(options =&gt;&#10;    options.UseSqlite(&quot;Data Source=bookmanagement.db&quot;));&#10;builder.Services.AddScoped&lt;CreateBookHandler&gt;();&#10;builder.Services.AddScoped&lt;GetAllBooksHandler&gt;();&#10;builder.Services.AddValidatorsFromAssemblyContaining&lt;CreateBook&gt;();&#10;builder.Services.AddScoped&lt;DeleteBookHandler&gt;();&#10;builder.Services.AddScoped&lt;UpdateBookHandler&gt;();&#10;&#10;&#10;var app = builder.Build();&#10;&#10;using (var scope = app.Services.CreateScope())&#10;{&#10;    var context = scope.ServiceProvider.GetRequiredService&lt;BookManagementContext&gt;();&#10;    context.Database.EnsureCreated();&#10;}&#10;&#10;// Configure the HTTP request pipeline.&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    app.MapOpenApi();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;&#10;app.MapPost(&quot;/books&quot;, async (CreateBookRequest req, CreateBookHandler handler) =&gt;&#10;    await handler.Handle(req));&#10;app.MapGet(&quot;/books&quot;, async (GetAllBooksHandler handler) =&gt;&#10;    await handler.Handle(new GetAllBooksRequest()));&#10;app.MapPut(&quot;/books/{id:guid}&quot;, async (Guid id, UpdateBookRequest req, UpdateBookHandler handler) =&gt;&#10;    await handler.Handle(id, req));&#10;app.MapDelete(&quot;/books/{id:guid}&quot;, async (Guid id, DeleteBookHandler handler) =&gt;&#10;{&#10;    await handler.Handle(new DeleteBookRequest(id));&#10;});&#10;    &#10;app.Run();&#10;&#10;var summaries = new[]&#10;{&#10;    &quot;Freezing&quot;, &quot;Bracing&quot;, &quot;Chilly&quot;, &quot;Cool&quot;, &quot;Mild&quot;, &quot;Warm&quot;, &quot;Balmy&quot;, &quot;Hot&quot;, &quot;Sweltering&quot;, &quot;Scorching&quot;&#10;};&#10;&#10;app.MapGet(&quot;/weatherforecast&quot;, () =&gt;&#10;    {&#10;        var forecast = Enumerable.Range(1, 5).Select(index =&gt;&#10;                new WeatherForecast&#10;                (&#10;                    DateOnly.FromDateTime(DateTime.Now.AddDays(index)),&#10;                    Random.Shared.Next(-20, 55),&#10;                    summaries[Random.Shared.Next(summaries.Length)]&#10;                ))&#10;            .ToArray();&#10;        return forecast;&#10;    })&#10;    .WithName(&quot;GetWeatherForecast&quot;);&#10;&#10;app.Run();&#10;&#10;record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)&#10;{&#10;    public int TemperatureF =&gt; 32 + (int)(TemperatureC / 0.5556);&#10;}" />
              <option name="updatedContent" value="using Laboratory_3.Features.Books;&#10;using Laboratory_3.Persistence;&#10;using Laboratory_3.Validators;&#10;using FluentValidation;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi&#10;builder.Services.AddOpenApi();&#10;builder.Services.AddEndpointsApiExplorer();&#10;builder.Services.AddDbContext&lt;BookManagementContext&gt;(options =&gt;&#10;    options.UseSqlite(&quot;Data Source=bookmanagement.db&quot;));&#10;builder.Services.AddScoped&lt;CreateBookHandler&gt;();&#10;builder.Services.AddScoped&lt;GetAllBooksHandler&gt;();&#10;builder.Services.AddValidatorsFromAssemblyContaining&lt;CreateBook&gt;();&#10;builder.Services.AddScoped&lt;DeleteBookHandler&gt;();&#10;builder.Services.AddScoped&lt;UpdateBookHandler&gt;();&#10;&#10;&#10;var app = builder.Build();&#10;&#10;using (var scope = app.Services.CreateScope())&#10;{&#10;    var context = scope.ServiceProvider.GetRequiredService&lt;BookManagementContext&gt;();&#10;    context.Database.EnsureCreated();&#10;}&#10;&#10;// Configure the HTTP request pipeline.&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    app.MapOpenApi();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;&#10;app.MapPost(&quot;/books&quot;, async (CreateBookRequest req, CreateBookHandler handler) =&gt;&#10;    await handler.Handle(req));&#10;app.MapGet(&quot;/books&quot;, async (GetAllBooksHandler handler) =&gt;&#10;    await handler.Handle(new GetAllBooksRequest()));&#10;app.MapPut(&quot;/books/{id:guid}&quot;, async (Guid id, UpdateBookRequest req, UpdateBookHandler handler) =&gt;&#10;    await handler.Handle(id, req));&#10;app.MapDelete(&quot;/books/{id:guid}&quot;, async (Guid id, DeleteBookHandler handler) =&gt;&#10;{&#10;    await handler.Handle(new DeleteBookRequest(id));&#10;});&#10;    &#10;app.Run();&#10;&#10;var summaries = new[]&#10;{&#10;    &quot;Freezing&quot;, &quot;Bracing&quot;, &quot;Chilly&quot;, &quot;Cool&quot;, &quot;Mild&quot;, &quot;Warm&quot;, &quot;Balmy&quot;, &quot;Hot&quot;, &quot;Sweltering&quot;, &quot;Scorching&quot;&#10;};&#10;&#10;app.MapGet(&quot;/weatherforecast&quot;, () =&gt;&#10;    {&#10;        var forecast = Enumerable.Range(1, 5).Select(index =&gt;&#10;                new WeatherForecast&#10;                (&#10;                    DateOnly.FromDateTime(DateTime.Now.AddDays(index)),&#10;                    Random.Shared.Next(-20, 55),&#10;                    summaries[Random.Shared.Next(summaries.Length)]&#10;                ))&#10;            .ToArray();&#10;        return forecast;&#10;    })&#10;    .WithName(&quot;GetWeatherForecast&quot;);&#10;&#10;app.Run();&#10;&#10;record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)&#10;{&#10;    public int TemperatureF =&gt; 32 + (int)(TemperatureC / 0.5556);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>